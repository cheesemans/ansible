---
- name: Install Minikube
  ansible.builtin.apt:
    deb: https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
  become: true

- name: Install Apt packages
  ansible.builtin.apt:
    name:
      - bash-completion
      - code
      - containerd.io
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      - git
      - google-cloud-cli
      - hstr
      - jq
      - kubectl
      - libavcodec-dev
      - packer
      - python3
      - python3-pip
      - python-is-python3
      - terraform
      - vim
  become: true

- name: Install snap packages
  ansible.builtin.snap:
    name:
      - starship
  become: true

# Configure Git
- name: Set email in git config
  community.general.git_config:
    name: user.email
    scope: global
    value: "mans.ostman@gmail.com"

- name: Set username in git config
  community.general.git_config:
    name: user.name
    scope: global
    value: "Måns Östman"

- name: Set default editor in git config
  community.general.git_config:
    name: core.editor
    scope: global
    value: vim

# Configure Docker
- name: Add user to docker group
  ansible.builtin.user:
    name: "{{ user }}"
    groups: docker
    append: true

# Install Rust
- name: Check if cargo is installed
  ansible.builtin.command: command -v cargo
  register: cargo_exists
  ignore_errors: true
  changed_when: false

- name: Download Installer
  when: not cargo_exists.failed
  ansible.builtin.get_url:
    url: https://sh.rustup.rs
    dest: /tmp/sh.rustup.rs
    mode: '0755'
    force: 'yes'

- name: Install rust/cargo
  when: not cargo_exists.failed
  ansible.builtin.command: /tmp/sh.rustup.rs -y

# Install Microsoft Teams
# - name: Check if Teams is installed
#   command: dpkg-query -W teams
#   register: teams_check_deb
#   failed_when: teams_check_deb.rc > 1
#   changed_when: teams_check_deb.rc == 1
#
# - name: Download deb file
#   ansible.builtin.get_url:
#     url: "https://packages.microsoft.com/repos/ms-teams/pool/main/t/teams/{{ teams_deb }}"
#     dest: "/tmp/{{ teams_deb }}"
#     mode: "0644"
#   when: teams_check_deb.rc == 1
#
# - name: Install Teams
#   apt: deb="/tmp/{{ teams_deb }}"
#   become: true
#   when: teams_check_deb.rc == 1

# Configure Vim
- name: Checkout Vundle repo
  ansible.builtin.git:
    repo: https://github.com/VundleVim/Vundle.vim.git
    dest: "{{ user_home }}/.vim/bundle/Vundle.vim"
    version: b255382d6242d7ea3877bf059d2934125e0c4d95

- name: Copy vimrc to correct path
  ansible.builtin.copy:
    src: .vimrc
    dest: "{{ user_home }}/.vimrc"
    mode: 0644

# Configure VSCode
- name: Check installed vscode extensions
  ansible.builtin.shell: |
    set -o pipefail
    code --list-extensions | tr '[:upper:]' '[:lower:]'
  args:
    executable: /bin/bash
  register: installed_extensions
  changed_when: false

- name: Install vscode extensions
  ansible.builtin.command: "code --install-extension {{ item }}"
  register: output
  changed_when: output.rc == 0
  loop: "{{ (vscode_extensions | difference(installed_extensions.stdout_lines)) }}"

- name: Copy user setting
  ansible.builtin.copy:
    src: settings.json
    dest: "{{ user_home }}/.config/Code/User/settings.json"
    mode: 0644

# Configure Starship
- name: Copy starship config file
  ansible.builtin.copy:
    src: starship.toml
    dest: "{{ user_home }}/.config/starship.toml"
    mode: 0664

# Random Stuff to put in bashrc file
- name: Add init script to bashrc
  ansible.builtin.blockinfile:
    path: "{{ user_home }}/.bashrc"
    block: |
      # HSTR configuration - add this to ~/.bashrc
      alias hh=hstr                    # hh to be alias for hstr
      export HSTR_CONFIG=hicolor       # get more colors
      shopt -s histappend              # append new history items to .bash_history
      export HISTCONTROL=ignorespace   # leading space hides commands from history
      export HISTFILESIZE=10000        # increase history file size (default is 500)
      export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
      # ensure synchronization between bash memory and history file
      export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
      # if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
      if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
      # if this is interactive shell, then bind 'kill last command' to Ctrl-x k
      if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi

      # Load starship
      eval "$(starship init bash)"

# Install FiraCode Font
- name: Create folder for FiraCode font if it does not exist
  ansible.builtin.file:
    path: /usr/local/share/fonts/FiraCode
    state: directory
    mode: 0755
  become: true

- name: Check if FiraCode is already installed
  ansible.builtin.find:
    paths: /usr/local/share/fonts/FiraCode
  register: font_installed

- name: Download and unpack FiraCode font
  ansible.builtin.unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.2.2/FiraCode.zip
    dest: /usr/local/share/fonts/FiraCode
    remote_src: true
  become: true
  when: not font_installed.matched > 0

- name: Rebuild font information cache files
  ansible.builtin.command: fc-cache -fv
  when: not font_installed.matched > 0

# Configure Zsh and install Oh-My-Zsh
#- name: Change user shell to zsh
#  ansible.builtin.user:
#    name: "{{ user }}"
#    shell: /usr/bin/zsh
#  become: true
#
#- name: Install oh-my-zsh
#  ansible.builtin.shell: |
#    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#  when: oh_my_zsh_path == ""
#
#- name: Download zsh-autosuggestions
#  ansible.builtin.git:
#    repo: https://github.com/zsh-users/zsh-autosuggestions
#    dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
#    version: a411ef3e0992d4839f0732ebeb9823024afaaaa8
#
#- name: Copy .zshrc to filesystem
#  ansible.builtin.copy:
#    src: .zshrc
#    dest: "{{ user_home }}/.zshrc"
#    mode: 0644
